from crewai import Crew
from agents.advice import ConfidenceAdviceAgent
from agents.corrector import ConfidenceCorrectorAgent
from agents.rater import ConfidenceRaterAgent
from agents.transcriber import TranscriberAgent
import asyncio
import os

# Get the directory containing the current script
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

def get_absolute_path(relative_path):
    """Convert relative paths to absolute paths"""
    return os.path.join(BASE_DIR, relative_path)

ADVICE_TRAINING_FILE = get_absolute_path("training/advice_examples.json")
RATER_TRAINING_FILE = get_absolute_path("training/rater_examples.json")
RATING_TABLE_FILE = get_absolute_path("training/rating_table.txt")
CORRECTOR_TRAINING_FILE = get_absolute_path("training/corrector_examples.json")


class ConfidenceCrew:
    def __init__(self):
        # Initialize all agents
        self.advice_agent = ConfidenceAdviceAgent(ADVICE_TRAINING_FILE).create_agent()
        self.corrector_agent = ConfidenceCorrectorAgent(CORRECTOR_TRAINING_FILE).create_agent()
        self.rater_agent = ConfidenceRaterAgent(RATER_TRAINING_FILE,RATING_TABLE_FILE).create_agent()
        self.transcriber_agent = TranscriberAgent().create_agent()
        
        # Initialize agent instances for direct method calls
        self.advice_instance = ConfidenceAdviceAgent(ADVICE_TRAINING_FILE)
        self.corrector_instance = ConfidenceCorrectorAgent(CORRECTOR_TRAINING_FILE)
        self.rater_instance = ConfidenceRaterAgent(RATER_TRAINING_FILE,RATING_TABLE_FILE)
        self.transcriber_instance = TranscriberAgent()

    def transcribe_audio(self, audio_file_path):
        """Transcribe audio using the transcriber agent"""
        return self.transcriber_instance.transcribe_audio(audio_file_path)

    async def analyze_text(self, text):
        """Run all analysis steps on the text asynchronously"""
        advice, correction, rating = await asyncio.gather(
            self.advice_instance.give_advice_async(text),
            self.corrector_instance.correct_text_async(text),
            self.rater_instance.rate_confidence_async(text)
        )
        
        return {
            "advice": advice,
            "correction": correction,
            "rating": rating,
            "original_text": text
        }

    def analyze_text_sync(self, text):
        """Synchronous wrapper for analyze_text"""
        return asyncio.run(self.analyze_text(text))

    async def analyze_multiple_ratings(self, ratings_data: list, ratings_data_2: list, ratings_data_3: list):
        """Analyze multiple ratings over time"""
        return await self.rater_instance.analyze_multiple_ratings(ratings_data, ratings_data_2, ratings_data_3)

    def analyze_multiple_ratings_sync(self, ratings_data: list, ratings_data_2: list, ratings_data_3: list):
        """Synchronous wrapper for analyze_multiple_ratings"""
        return asyncio.run(self.analyze_multiple_ratings(ratings_data, ratings_data_2, ratings_data_3))

    def create_crew(self):
        """Create the CrewAI crew with all agents"""
        return Crew(
            agents=[
                self.transcriber_agent,
                self.advice_agent,
                self.corrector_agent,
                self.rater_agent
            ],
            verbose=True
        )   
    async def give_advice(self, text: str) -> str:      # This method souley uses one method in one agent.
        """
        Asynchronously gives advice based on the input text.

        Args:
            text (str): The text to provide advice on.

        Returns:
            str: The advice generated by the advice agent.
        """
        return await self.advice_instance.give_advice_async(text)   


# Example usage
if __name__ == "__main__":
    crew = ConfidenceCrew()
    
    # Example synchronous usage
    text = "I'm not sure if this is right, but maybe we could try this approach?"
    analysis = crew.analyze_text_sync(text)
    print("Analysis Results:")
    print(f"Advice: {analysis['advice']}")
    print(f"Correction: {analysis['correction']}")
    print(f"Rating: {analysis['rating']}")
    
    # Example transcription
    transcript = crew.transcribe_audio("testaudio.mp3")
    print(f"Transcript: {transcript}")